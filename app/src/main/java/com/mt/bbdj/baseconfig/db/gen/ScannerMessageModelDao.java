package com.mt.bbdj.baseconfig.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mt.bbdj.baseconfig.db.ScannerMessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCANNER_MESSAGE_MODEL".
*/
public class ScannerMessageModelDao extends AbstractDao<ScannerMessageModel, Long> {

    public static final String TABLENAME = "SCANNER_MESSAGE_MODEL";

    /**
     * Properties of entity ScannerMessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "code");
        public final static Property Waybill = new Property(2, String.class, "waybill", false, "waybill");
        public final static Property Phone = new Property(3, String.class, "phone", false, "phone");
        public final static Property ExpressName = new Property(4, String.class, "expressName", false, "express_name");
        public final static Property ExpressLogo = new Property(5, String.class, "expressLogo", false, "express_logo");
        public final static Property IsHavaPhone = new Property(6, int.class, "isHavaPhone", false, "is_have_phone");
        public final static Property IsHaveWayNumber = new Property(7, int.class, "isHaveWayNumber", false, "is_have_number");
        public final static Property MAXTAG = new Property(8, int.class, "MAXTAG", false, "max");
        public final static Property Timestamp = new Property(9, String.class, "timestamp", false, "timestamp");
        public final static Property IsSync = new Property(10, int.class, "isSync", false, "is_sync");
        public final static Property Uuid = new Property(11, String.class, "uuid", false, "uuid");
    }


    public ScannerMessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public ScannerMessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCANNER_MESSAGE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"code\" TEXT," + // 1: code
                "\"waybill\" TEXT," + // 2: waybill
                "\"phone\" TEXT," + // 3: phone
                "\"express_name\" TEXT," + // 4: expressName
                "\"express_logo\" TEXT," + // 5: expressLogo
                "\"is_have_phone\" INTEGER NOT NULL ," + // 6: isHavaPhone
                "\"is_have_number\" INTEGER NOT NULL ," + // 7: isHaveWayNumber
                "\"max\" INTEGER NOT NULL ," + // 8: MAXTAG
                "\"timestamp\" TEXT," + // 9: timestamp
                "\"is_sync\" INTEGER NOT NULL ," + // 10: isSync
                "\"uuid\" TEXT);"); // 11: uuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCANNER_MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScannerMessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String waybill = entity.getWaybill();
        if (waybill != null) {
            stmt.bindString(3, waybill);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(5, expressName);
        }
 
        String expressLogo = entity.getExpressLogo();
        if (expressLogo != null) {
            stmt.bindString(6, expressLogo);
        }
        stmt.bindLong(7, entity.getIsHavaPhone());
        stmt.bindLong(8, entity.getIsHaveWayNumber());
        stmt.bindLong(9, entity.getMAXTAG());
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(10, timestamp);
        }
        stmt.bindLong(11, entity.getIsSync());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(12, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScannerMessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String waybill = entity.getWaybill();
        if (waybill != null) {
            stmt.bindString(3, waybill);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(5, expressName);
        }
 
        String expressLogo = entity.getExpressLogo();
        if (expressLogo != null) {
            stmt.bindString(6, expressLogo);
        }
        stmt.bindLong(7, entity.getIsHavaPhone());
        stmt.bindLong(8, entity.getIsHaveWayNumber());
        stmt.bindLong(9, entity.getMAXTAG());
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(10, timestamp);
        }
        stmt.bindLong(11, entity.getIsSync());
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(12, uuid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScannerMessageModel readEntity(Cursor cursor, int offset) {
        ScannerMessageModel entity = new ScannerMessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // waybill
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // expressName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // expressLogo
            cursor.getInt(offset + 6), // isHavaPhone
            cursor.getInt(offset + 7), // isHaveWayNumber
            cursor.getInt(offset + 8), // MAXTAG
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // timestamp
            cursor.getInt(offset + 10), // isSync
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScannerMessageModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWaybill(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpressName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExpressLogo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsHavaPhone(cursor.getInt(offset + 6));
        entity.setIsHaveWayNumber(cursor.getInt(offset + 7));
        entity.setMAXTAG(cursor.getInt(offset + 8));
        entity.setTimestamp(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsSync(cursor.getInt(offset + 10));
        entity.setUuid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScannerMessageModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScannerMessageModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScannerMessageModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
