package com.mt.bbdj.baseconfig.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mt.bbdj.baseconfig.db.WaillMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAILL_MESSAGE".
*/
public class WaillMessageDao extends AbstractDao<WaillMessage, Void> {

    public static final String TABLENAME = "WAILL_MESSAGE";

    /**
     * Properties of entity WaillMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property TagCode = new Property(1, String.class, "tagCode", false, "TAG_CODE");
        public final static Property WailNumber = new Property(2, String.class, "wailNumber", false, "WAIL_NUMBER");
        public final static Property ExpressName = new Property(3, String.class, "expressName", false, "EXPRESS_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property TagNumber = new Property(6, int.class, "tagNumber", false, "TAG_NUMBER");
    }


    public WaillMessageDao(DaoConfig config) {
        super(config);
    }
    
    public WaillMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAILL_MESSAGE\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"TAG_CODE\" TEXT," + // 1: tagCode
                "\"WAIL_NUMBER\" TEXT," + // 2: wailNumber
                "\"EXPRESS_NAME\" TEXT," + // 3: expressName
                "\"NAME\" TEXT," + // 4: name
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"TAG_NUMBER\" INTEGER NOT NULL );"); // 6: tagNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAILL_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WaillMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tagCode = entity.getTagCode();
        if (tagCode != null) {
            stmt.bindString(2, tagCode);
        }
 
        String wailNumber = entity.getWailNumber();
        if (wailNumber != null) {
            stmt.bindString(3, wailNumber);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(4, expressName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
        stmt.bindLong(7, entity.getTagNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WaillMessage entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String tagCode = entity.getTagCode();
        if (tagCode != null) {
            stmt.bindString(2, tagCode);
        }
 
        String wailNumber = entity.getWailNumber();
        if (wailNumber != null) {
            stmt.bindString(3, wailNumber);
        }
 
        String expressName = entity.getExpressName();
        if (expressName != null) {
            stmt.bindString(4, expressName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
        stmt.bindLong(7, entity.getTagNumber());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WaillMessage readEntity(Cursor cursor, int offset) {
        WaillMessage entity = new WaillMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tagCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wailNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expressName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.getInt(offset + 6) // tagNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WaillMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTagCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWailNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpressName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTagNumber(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WaillMessage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WaillMessage entity) {
        return null;
    }

    @Override
    public boolean hasKey(WaillMessage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
