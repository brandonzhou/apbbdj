package com.mt.bbdj.baseconfig.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mt.bbdj.baseconfig.db.PickupCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICKUP_CODE".
*/
public class PickupCodeDao extends AbstractDao<PickupCode, String> {

    public static final String TABLENAME = "PICKUP_CODE";

    /**
     * Properties of entity PickupCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property ShelfNumber = new Property(2, String.class, "shelfNumber", false, "SHELF_NUMBER");
        public final static Property StartNumber = new Property(3, int.class, "startNumber", false, "START_NUMBER");
        public final static Property CurrentNumber = new Property(4, String.class, "currentNumber", false, "CURRENT_NUMBER");
    }


    public PickupCodeDao(DaoConfig config) {
        super(config);
    }
    
    public PickupCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICKUP_CODE\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "\"TYPE\" TEXT," + // 1: type
                "\"SHELF_NUMBER\" TEXT," + // 2: shelfNumber
                "\"START_NUMBER\" INTEGER NOT NULL ," + // 3: startNumber
                "\"CURRENT_NUMBER\" TEXT);"); // 4: currentNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICKUP_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PickupCode entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String shelfNumber = entity.getShelfNumber();
        if (shelfNumber != null) {
            stmt.bindString(3, shelfNumber);
        }
        stmt.bindLong(4, entity.getStartNumber());
 
        String currentNumber = entity.getCurrentNumber();
        if (currentNumber != null) {
            stmt.bindString(5, currentNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PickupCode entity) {
        stmt.clearBindings();
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(1, user_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String shelfNumber = entity.getShelfNumber();
        if (shelfNumber != null) {
            stmt.bindString(3, shelfNumber);
        }
        stmt.bindLong(4, entity.getStartNumber());
 
        String currentNumber = entity.getCurrentNumber();
        if (currentNumber != null) {
            stmt.bindString(5, currentNumber);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PickupCode readEntity(Cursor cursor, int offset) {
        PickupCode entity = new PickupCode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shelfNumber
            cursor.getInt(offset + 3), // startNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // currentNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PickupCode entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShelfNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartNumber(cursor.getInt(offset + 3));
        entity.setCurrentNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PickupCode entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(PickupCode entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PickupCode entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
