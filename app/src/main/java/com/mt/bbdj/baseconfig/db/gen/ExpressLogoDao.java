package com.mt.bbdj.baseconfig.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mt.bbdj.baseconfig.db.ExpressLogo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXPRESS_LOGO".
*/
public class ExpressLogoDao extends AbstractDao<ExpressLogo, Long> {

    public static final String TABLENAME = "EXPRESS_LOGO";

    /**
     * Properties of entity ExpressLogo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Express_id = new Property(1, String.class, "express_id", false, "EXPRESS_ID");
        public final static Property LogoInterPath = new Property(2, String.class, "logoInterPath", false, "LOGO_INTER_PATH");
        public final static Property LogoLocalPath = new Property(3, String.class, "logoLocalPath", false, "LOGO_LOCAL_PATH");
        public final static Property Express_name = new Property(4, String.class, "express_name", false, "EXPRESS_NAME");
        public final static Property Flag = new Property(5, String.class, "flag", false, "FLAG");
        public final static Property States = new Property(6, String.class, "states", false, "STATES");
        public final static Property Property = new Property(7, String.class, "property", false, "PROPERTY");
    }


    public ExpressLogoDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressLogoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPRESS_LOGO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EXPRESS_ID\" TEXT," + // 1: express_id
                "\"LOGO_INTER_PATH\" TEXT," + // 2: logoInterPath
                "\"LOGO_LOCAL_PATH\" TEXT," + // 3: logoLocalPath
                "\"EXPRESS_NAME\" TEXT," + // 4: express_name
                "\"FLAG\" TEXT," + // 5: flag
                "\"STATES\" TEXT," + // 6: states
                "\"PROPERTY\" TEXT);"); // 7: property
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPRESS_LOGO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExpressLogo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String express_id = entity.getExpress_id();
        if (express_id != null) {
            stmt.bindString(2, express_id);
        }
 
        String logoInterPath = entity.getLogoInterPath();
        if (logoInterPath != null) {
            stmt.bindString(3, logoInterPath);
        }
 
        String logoLocalPath = entity.getLogoLocalPath();
        if (logoLocalPath != null) {
            stmt.bindString(4, logoLocalPath);
        }
 
        String express_name = entity.getExpress_name();
        if (express_name != null) {
            stmt.bindString(5, express_name);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(6, flag);
        }
 
        String states = entity.getStates();
        if (states != null) {
            stmt.bindString(7, states);
        }
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(8, property);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExpressLogo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String express_id = entity.getExpress_id();
        if (express_id != null) {
            stmt.bindString(2, express_id);
        }
 
        String logoInterPath = entity.getLogoInterPath();
        if (logoInterPath != null) {
            stmt.bindString(3, logoInterPath);
        }
 
        String logoLocalPath = entity.getLogoLocalPath();
        if (logoLocalPath != null) {
            stmt.bindString(4, logoLocalPath);
        }
 
        String express_name = entity.getExpress_name();
        if (express_name != null) {
            stmt.bindString(5, express_name);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(6, flag);
        }
 
        String states = entity.getStates();
        if (states != null) {
            stmt.bindString(7, states);
        }
 
        String property = entity.getProperty();
        if (property != null) {
            stmt.bindString(8, property);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ExpressLogo readEntity(Cursor cursor, int offset) {
        ExpressLogo entity = new ExpressLogo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // express_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logoInterPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logoLocalPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // express_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // states
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // property
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExpressLogo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpress_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogoInterPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogoLocalPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpress_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStates(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProperty(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ExpressLogo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ExpressLogo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ExpressLogo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
