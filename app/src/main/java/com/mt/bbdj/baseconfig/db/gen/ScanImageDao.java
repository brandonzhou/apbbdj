package com.mt.bbdj.baseconfig.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mt.bbdj.baseconfig.db.ScanImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAN_IMAGE".
*/
public class ScanImageDao extends AbstractDao<ScanImage, String> {

    public static final String TABLENAME = "SCAN_IMAGE";

    /**
     * Properties of entity ScanImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EId = new Property(0, String.class, "eId", true, "E_ID");
        public final static Property PickCode = new Property(1, String.class, "pickCode", false, "PICK_CODE");
        public final static Property LocalPath = new Property(2, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property State = new Property(3, String.class, "state", false, "STATE");
        public final static Property User_id = new Property(4, String.class, "user_id", false, "USER_ID");
    }


    public ScanImageDao(DaoConfig config) {
        super(config);
    }
    
    public ScanImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAN_IMAGE\" (" + //
                "\"E_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: eId
                "\"PICK_CODE\" TEXT," + // 1: pickCode
                "\"LOCAL_PATH\" TEXT," + // 2: localPath
                "\"STATE\" TEXT," + // 3: state
                "\"USER_ID\" TEXT);"); // 4: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAN_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScanImage entity) {
        stmt.clearBindings();
 
        String eId = entity.getEId();
        if (eId != null) {
            stmt.bindString(1, eId);
        }
 
        String pickCode = entity.getPickCode();
        if (pickCode != null) {
            stmt.bindString(2, pickCode);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScanImage entity) {
        stmt.clearBindings();
 
        String eId = entity.getEId();
        if (eId != null) {
            stmt.bindString(1, eId);
        }
 
        String pickCode = entity.getPickCode();
        if (pickCode != null) {
            stmt.bindString(2, pickCode);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(3, localPath);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(4, state);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(5, user_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ScanImage readEntity(Cursor cursor, int offset) {
        ScanImage entity = new ScanImage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // eId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pickCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScanImage entity, int offset) {
        entity.setEId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPickCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ScanImage entity, long rowId) {
        return entity.getEId();
    }
    
    @Override
    public String getKey(ScanImage entity) {
        if(entity != null) {
            return entity.getEId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScanImage entity) {
        return entity.getEId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
